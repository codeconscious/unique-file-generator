<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CountWarning" xml:space="preserve">
    <value>You've requested a lot of files. Continue?</value>
    <comment/>
  </data>
  <data name="SizeWarning" xml:space="preserve">
    <value>You've requested very large files. Continue?</value>
    <comment/>
  </data>
  <data name="DelayWarning" xml:space="preserve">
    <value>You've requested a very long delay between files. Continue?</value>
    <comment/>
  </data>
  <data name="CancelledByUser" xml:space="preserve">
    <value>Operation cancelled.</value>
    <comment/>
  </data>
  <data name="CancelledDueToError" xml:space="preserve">
    <value>Operation aborted:</value>
    <comment/>
  </data>
  <data name="CompletedOne" xml:space="preserve">
    <value>1 file created in {0}.</value>
    <comment>{0}: the elapsed time.</comment>
  </data>
  <data name="CompletedZeroOrMultiple" xml:space="preserve">
    <value>{0} files created in {1}.</value>
    <comment>{0}: The file count; {1}: the elapsed time.</comment>
  </data>
  <data name="DriveSpaceInsufficient" xml:space="preserve">
    <value>There is not enough free space on this disk to continue.</value>
    <comment/>
  </data>
  <data name="DriveInfoReadError" xml:space="preserve">
    <value>An unknown error occurred when reading the drive information.</value>
    <comment/>
  </data>
  <data name="FileNameInvalid" xml:space="preserve">
    <value>An invalid filename was specified.</value>
    <comment/>
  </data>
  <data name="FileContentInvalid" xml:space="preserve">
    <value>File content must be specified.</value>
    <comment/>
  </data>
  <data name="PathRootParseError" xml:space="preserve">
    <value>This drive's path root could not be determined.</value>
    <comment/>
  </data>
  <data name="FileSizeInvalidZero" xml:space="preserve">
    <value>File size cannot be 0.</value>
    <comment/>
  </data>
  <data name="FileSizeInvalidRange" xml:space="preserve">
    <value>The file size must be a positive number greater than 0.</value>
    <comment/>
  </data>
  <data name="FileCountMissing" xml:space="preserve">
    <value>A file count must be specified.</value>
    <comment/>
  </data>
  <data name="FileCountInvalidRange" xml:space="preserve">
    <value>You must enter a file count of at least 1 as the first argument.</value>
    <comment/>
  </data>
  <data name="FileCountTooHigh" xml:space="preserve">
    <value>You must enter a file count between 1 and 4,294,967,295 (inclusive) as the first argument.</value>
    <comment/>
  </data>
  <data name="FileCountInvalidZero" xml:space="preserve">
    <value>The file count cannot be zero.</value>
    <comment/>
  </data>
  <data name="ValueWithNoFlag" xml:space="preserve">
    <value>A flag was not specified for "{0}".</value>
    <comment>{0}: A user-supplied command line argument</comment>
  </data>
  <data name="FlagCanBeUsedOnce" xml:space="preserve">
    <value>A flag can only be specified once.</value>
    <comment/>
  </data>
  <data name="CharBankEmpty" xml:space="preserve">
    <value>The character bank is empty. It must contain at least 2 characters.</value>
    <comment/>
  </data>
  <data name="CharBankTooShort" xml:space="preserve">
    <value>The character bank must contain at least 2 characters.</value>
    <comment/>
  </data>
  <data name="StringCountZero" xml:space="preserve">
    <value>The count of desired strings must be greater than zero.</value>
    <comment/>
  </data>
  <data name="StringLengthZero" xml:space="preserve">
    <value>The length of each string must be greater than zero.</value>
    <comment/>
  </data>
  <data name="LengthInvalidNegative" xml:space="preserve">
    <value>The length cannot be negative.</value>
    <comment/>
  </data>
  <data name="FileCreationDelayOutOfRange" xml:space="preserve">
    <value>The file creation delay must be 0 or higher.</value>
    <comment/>
  </data>
  <data name="FlagInvalid" xml:space="preserve">
    <value>The argument flag "{0}" is not supported.</value>
    <comment>{0}: A user-supplied command line argument</comment>
  </data>
</root>
